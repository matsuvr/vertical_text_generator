name: 定期APIテスト

# 定期実行設定（UTC時間）
on:
  schedule:
    # 毎日午前2時（JST 11時）に実行
    - cron: '0 2 * * *'
    # 毎週月曜日午前3時（JST 12時）に詳細テスト
    - cron: '0 3 * * 1'
  workflow_dispatch: # 手動実行を許可
    inputs:
      test_type:
        description: 'テストタイプを選択'
        required: true
        default: 'basic'
        type: choice
        options:
        - basic
        - full
        - performance

env:
  API_TOKEN: ${{ secrets.API_TOKEN || 'your-secret-token-here' }}
  PYTHON_VERSION: '3.11'

jobs:
  scheduled-test:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: リポジトリをチェックアウト
      uses: actions/checkout@v4
      
    - name: Python環境をセットアップ
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: システム依存関係をインストール
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          fonts-noto-cjk \
          fonts-liberation \
          libnss3-dev \
          libatk-bridge2.0-dev \
          libdrm2 \
          libxkbcommon-dev \
          libgtk-3-dev \
          libatspi2.0-dev \
          xvfb
          
    - name: Python依存関係をインストール
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        playwright install chromium
        
    - name: テストタイプを判定
      id: test-type
      run: |
        # スケジュールに基づいてテストタイプを決定
        if [ "${{ github.event_name }}" = "schedule" ]; then
          if [ "${{ github.event.schedule }}" = "0 3 * * 1" ]; then
            echo "type=full" >> $GITHUB_OUTPUT
          else
            echo "type=basic" >> $GITHUB_OUTPUT
          fi
        else
          echo "type=${{ github.event.inputs.test_type || 'basic' }}" >> $GITHUB_OUTPUT
        fi
        
    - name: APIサーバーをバックグラウンドで起動
      run: |
        python main.py &
        sleep 10
        
    - name: 基本APIテスト
      if: steps.test-type.outputs.type == 'basic' || steps.test-type.outputs.type == 'full'
      run: |
        python test_api.py
        
    - name: パフォーマンステスト（延長版）
      if: steps.test-type.outputs.type == 'performance' || steps.test-type.outputs.type == 'full'
      run: |
        # パフォーマンステスト拡張版を実行
        python -c "
from test_api import run_performance_test
import os

token = os.getenv('API_TOKEN', 'your-secret-token-here')
print('=== 拡張パフォーマンステスト ===')

# 異なる条件でパフォーマンステストを実行
test_cases = [
    ('小さいテキスト', 10),
    ('中程度テキスト', 10), 
    ('大きいテキスト', 5),
]

for name, num_requests in test_cases:
    print(f'\n--- {name} ({num_requests}回) ---')
    run_performance_test('http://localhost:8000', token, num_requests)
"
        
    - name: ストレステスト
      if: steps.test-type.outputs.type == 'full'
      run: |
        # 並行リクエストテスト
        python -c "
import requests
import threading
import time
import os
from concurrent.futures import ThreadPoolExecutor

def stress_test_request(thread_id):
    headers = {
        'Authorization': f'Bearer {os.getenv(\"API_TOKEN\", \"your-secret-token-here\")}',
        'Content-Type': 'application/json'
    }
    data = {
        'text': f'ストレステスト{thread_id}',
        'font_size': 20
    }
    
    try:
        start = time.time()
        response = requests.post('http://localhost:8000/render', headers=headers, json=data, timeout=30)
        end = time.time()
        
        if response.status_code == 200:
            print(f'スレッド{thread_id}: 成功 ({end-start:.2f}s)')
            return True
        else:
            print(f'スレッド{thread_id}: 失敗 {response.status_code}')
            return False
    except Exception as e:
        print(f'スレッド{thread_id}: エラー {e}')
        return False

print('=== ストレステスト（並行リクエスト） ===')
with ThreadPoolExecutor(max_workers=5) as executor:
    futures = [executor.submit(stress_test_request, i) for i in range(10)]
    results = [f.result() for f in futures]
    success_count = sum(results)
    print(f'結果: {success_count}/10 成功')
"
        
    - name: テスト結果をアップロード
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: scheduled-test-results-${{ github.run_number }}
        path: |
          test_output/
          test_results/
        retention-days: 30  # 定期テストは長期保存
        
    - name: 失敗時の通知準備
      if: failure() && github.event_name == 'schedule'
      run: |
        echo "SCHEDULED_TEST_FAILED=true" >> $GITHUB_ENV
        echo "TEST_TYPE=${{ steps.test-type.outputs.type }}" >> $GITHUB_ENV
        
    # 必要に応じて失敗時にSlack通知等を追加
    # - name: Slack通知
    #   if: failure() && env.SCHEDULED_TEST_FAILED == 'true'
    #   uses: 8398a7/action-slack@v3
    #   with:
    #     status: failure
    #     text: '定期APIテストが失敗しました'